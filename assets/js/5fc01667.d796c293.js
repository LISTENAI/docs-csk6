"use strict";(self.webpackChunkls_docs_web=self.webpackChunkls_docs_web||[]).push([[3472],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),s=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=r,_=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return t?o.createElement(_,l(l({ref:n},u),{},{components:t})):o.createElement(_,l({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=t[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93391:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=t(87462),r=(t(67294),t(3905));const a={sidebar_label:"\u76f8\u5173\u5de5\u5177",sidebar_position:1},l="1. \u5bfc\u56fe\u5de5\u5177ONNX",i={unversionedId:"AIEcology/Linger/Tools/tool",id:"AIEcology/Linger/Tools/tool",isDocsHomePage:!1,title:"1. \u5bfc\u56fe\u5de5\u5177ONNX",description:"pytorch \u52a8\u6001\u6a21\u578b\u5230\u9759\u6001\u6a21\u578b",source:"@site/docs/AIEcology/Linger/Tools/tool.md",sourceDirName:"AIEcology/Linger/Tools",slug:"/AIEcology/Linger/Tools/tool",permalink:"/docs-csk6/AIEcology/Linger/Tools/tool",version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"\u76f8\u5173\u5de5\u5177",sidebar_position:1},sidebar:"AIEcologyLinger",previous:{title:"\u529f\u80fd\u793a\u4f8b",permalink:"/docs-csk6/AIEcology/Linger/Example/example"},next:{title:"\u8d21\u732e\u6587\u6863\u8bf4\u660e",permalink:"/docs-csk6/AIEcology/Linger/Contribution/doc"}},p=[{value:"1.1 \u4ec0\u4e48\u662fONNX",id:"11-\u4ec0\u4e48\u662fonnx",children:[]},{value:"1.2 \u5982\u4f55\u5bfc\u51fa ONNX \u6a21\u578b",id:"12-\u5982\u4f55\u5bfc\u51fa-onnx-\u6a21\u578b",children:[{value:"1.2.1 torch \u5b98\u65b9\u5bfc\u51fa ONNX",id:"121-torch-\u5b98\u65b9\u5bfc\u51fa-onnx",children:[]},{value:"1.2.2 \u4f7f\u7528 linger \u5bfc\u51fa onnx",id:"122-\u4f7f\u7528-linger-\u5bfc\u51fa-onnx",children:[]}]},{value:"2.1 wb_analyse \u5206\u6790\u5de5\u5177",id:"21-wb_analyse-\u5206\u6790\u5de5\u5177",children:[]},{value:"2.2 out_analyse \u5206\u6790\u5de5\u5177",id:"22-out_analyse-\u5206\u6790\u5de5\u5177",children:[]},{value:"2.3 linger\u5bfc\u56fe\u9519\u4e71\u53ca\u5176\u89e3\u51b3\u65b9\u6cd5",id:"23-linger\u5bfc\u56fe\u9519\u4e71\u53ca\u5176\u89e3\u51b3\u65b9\u6cd5",children:[{value:"2.3.1 \u8c03\u8bd5\u9009\u9879",id:"231-\u8c03\u8bd5\u9009\u9879",children:[]},{value:"2.3.2 \u65e7\u7248linger\u5bfc\u56fe\u9519\u8bef",id:"232-\u65e7\u7248linger\u5bfc\u56fe\u9519\u8bef",children:[]}]}],s={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1-\u5bfc\u56fe\u5de5\u5177onnx"},"1. \u5bfc\u56fe\u5de5\u5177ONNX"),(0,r.kt)("p",null,"pytorch \u52a8\u6001\u6a21\u578b\u5230\u9759\u6001\u6a21\u578b"),(0,r.kt)("h2",{id:"11-\u4ec0\u4e48\u662fonnx"},"1.1 \u4ec0\u4e48\u662fONNX"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Open Neural Network Exchange\uff08ONNX\uff0c\u5f00\u653e\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362\uff09\u683c\u5f0f\uff0c\u662f\u4e00\u4e2a\u7528\u4e8e\u8868\u793a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u6807\u51c6\uff0c\u53ef\u4f7f\u6a21\u578b\u5728\u4e0d\u540c\u6846\u67b6\u4e4b\u95f4\u8fdb\u884c\u8f6c\u79fb\u3002"),(0,r.kt)("li",{parentName:"ul"},"ONNX \u4e3a AI \u6a21\u578b\u63d0\u4f9b\u5f00\u6e90\u683c\u5f0f\u3002\u5b83\u5b9a\u4e49\u4e86\u53ef\u6269\u5c55\u7684\u8ba1\u7b97\u56fe\u6a21\u578b\uff0c\u4ee5\u53ca\u5185\u7f6e\u8fd0\u7b97\u7b26\u548c\u6807\u51c6\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49\u3002\u6700\u521d\u7684 ONNX \u4e13\u6ce8\u4e8e\u63a8\u7406\u6240\u9700\u7684\u529f\u80fd ONNX \u89e3\u91ca\u8ba1\u7b97\u56fe\u7684\u53ef\u79fb\u690d\uff0c\u5b83\u4f7f\u7528 graph \u7684\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u5b83\u4e0d\u4e00\u5b9a\u662f\u6846\u67b6\u9009\u62e9\u5728\u5185\u90e8\u4f7f\u7528\u548c\u64cd\u4f5c\u8ba1\u7b97\u7684\u5f62\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u4f18\u5316\u8fc7\u7a0b\u4e2d\u64cd\u4f5c\u66f4\u6709\u6548\uff0c\u5219\u5b9e\u73b0\u53ef\u4ee5\u5728\u5b58\u50a8\u5668\u4e2d\u4ee5\u4e0d\u540c\u65b9\u5f0f\u8868\u793a\u6a21\u578b\u3002")),(0,r.kt)("h2",{id:"12-\u5982\u4f55\u5bfc\u51fa-onnx-\u6a21\u578b"},"1.2 \u5982\u4f55\u5bfc\u51fa ONNX \u6a21\u578b"),(0,r.kt)("h3",{id:"121-torch-\u5b98\u65b9\u5bfc\u51fa-onnx"},"1.2.1 torch \u5b98\u65b9\u5bfc\u51fa ONNX"),(0,r.kt)("p",null,"torch\u5b98\u65b9\u63d0\u4f9b\u4e86\u4ecePyTorch\u5bfc\u51faonnx\u7684\u63a5\u53e3\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"torch.onnx.export(model, args, f, export_params=True, verbose=False, training=TrainingMode.EVAL, input_names=None, output_names=None, aten=False, export_raw_ir=False, operator_export_type=None, opset_version=None, _retain_param_name=True, do_constant_folding=True, example_outputs=None, strip_doc_string=True, dynamic_axes=None, keep_initializers_as_inputs=None, custom_opsets=None, enable_onnx_checker=True, use_external_data_format=False)\n")),(0,r.kt)("p",null,"\u5e38\u7528\u53c2\u6570\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export_params"),"\uff1a\u8be5\u53c2\u6570\u9ed8\u8ba4\u4e3aTrue\uff0c\u4e5f\u5c31\u662f\u4f1a\u5bfc\u51fa\u8bad\u7ec3\u597d\u7684\u6743\u91cd\uff1b\u82e5\u8bbe\u7f6e\u4e3aFalse\uff0c\u5219\u5bfc\u51fa\u7684\u662f\u6ca1\u6709\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"verbose"),"\uff1a\u9ed8\u8ba4\u4e3aFalse\uff0c\u82e5\u8bbe\u7f6e\u4e3aTrue\uff0c\u5219\u4f1a\u6253\u5370\u5bfc\u51faonnx\u65f6\u7684\u4e00\u4e9b\u65e5\u5fd7\uff0c\u4fbf\u4e8e\u5206\u6790\u7f51\u7edc\u7ed3\u6784\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"opset_version"),"\uff1aonnx op\u96c6\u5408\u7248\u672c\u53f7\uff0c\u5728linger\u4e2d\u901a\u5e38\u8bbe\u7f6e\u4e3a11\u621612\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dynamic_axes"),"\uff1a\u53ef\u4ee5\u6307\u5b9a\u54ea\u4e9b\u7ef4\u5ea6\u662f\u53d8\u5316\u7684\uff0c\u4f8b\u5982\u5f53\u6211\u4eec\u5bfc\u51fa\u6a21\u578b\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7684\u7b2c\u4e00\u4e2a\u7ef4\u5ea6\u662fbatch_size\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ef4\u5ea6\u5e94\u8be5\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u8be5\u53c2\u6570\u6307\u5b9a\u8fd9\u4e2a\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u3002")),(0,r.kt)("p",null,"\u5bfc\u51fa\u7684\u7b80\u5355\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import torch\nimport torch.onnx\ntorch_model = Model()\n# set the model to inference mode\ntorch_model.eval()\ndummy_input = torch.randn(1,3,244,244)\ntorch.onnx.export(torch_model,dummy_input,"test.onnx")\n\n')),(0,r.kt)("h3",{id:"122-\u4f7f\u7528-linger-\u5bfc\u51fa-onnx"},"1.2.2 \u4f7f\u7528 linger \u5bfc\u51fa onnx"),(0,r.kt)("p",null,"\u5982\u679c\u8c03\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"linger.init(...)"),"\u63a5\u53e3\u540e\uff0c\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"torch.onnx.export"),"\u4f1a\u88ab\u81ea\u52a8\u66ff\u6362\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"linger.onnx.export"),"\u8fdb\u884c\u8c03\u7528\uff0c\u5373",(0,r.kt)("inlineCode",{parentName:"p"},"torch.onnx.export = linger.onnx.export")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import linger\n.....\nlinger.init(...)\ntorch.onnx.export(...) # \u5b9e\u9645\u4e0a\u8c03\u7528\u7684\u662f linger.onnx.export\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5bfc\u51fa\u652f\u6301\u52a8\u6001\u8f93\u5165\u5927\u5c0f\u7684\u56fe")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"torch.onnx.export(torch_model,               # model being run\n                  x,                         # model input (or a tuple for multiple inputs)\n                  \"super_resolution.onnx\",   # where to save the model (can be a file or file-like object)\n                  export_params=True,        # store the trained parameter weights inside the model file\n                  opset_version=12,          # the ONNX version to export the model to\n                  do_constant_folding=True,  # whether to execute constant folding for optimization\n                  input_names = ['input'],   # the model's input names\n                  output_names = ['output'], # the model's output names\n                  dynamic_axes={'input' : {0 : 'batch_size'},    # variable lenght axes\n                                'output' : {0 : 'batch_size'}})\n")),(0,r.kt)("p",null,"\u5176\u4e2d dynamic_axes\u4f7f\u7528\u6709\u51e0\u79cd\u5f62\u5f0f:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u4ec5\u63d0\u4f9b\u7d22\u5f15\u4fe1\u606f\n\u4f8b\u5982\u4e0b\u4f8b\u5b50\u8868\u793a \u628a",(0,r.kt)("inlineCode",{parentName:"li"},"input_1"),"\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"0,2,3"),"\u7ef4\u4f5c\u4e3a\u52a8\u6001\u8f93\u5165\uff0c\u7b2c",(0,r.kt)("inlineCode",{parentName:"li"},"1"),"\u4ecd\u7136\u4fdd\u6301\u56fa\u5b9a\u8f93\u5165\uff0c'input_2'\u7b2c",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"\u7ef4\u4f5c\u4e3a\u52a8\u6001\u8f93\u5165\uff0c",(0,r.kt)("inlineCode",{parentName:"li"},"output"),"\u7684",(0,r.kt)("inlineCode",{parentName:"li"},"0,1"),"\u7ef4\u4f5c\u4e3a\u52a8\u6001\u8f93\u5165\uff0c\u5bf9\u4e8e\u52a8\u6001\u8f93\u5165\u7684\u7ef4\u5ea6\uff0cPyTorch\u4f1a\u81ea\u52a8\u7ed9\u8be5\u7ef4\u5ea6\u751f\u6210\u4e00\u4e2a\u540d\u5b57\u4ee5\u66ff\u6362\u7ef4\u5ea6\u4fe1\u606f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dynamic_axes = {'input_1':[0, 2, 3],\n                  'input_2':[0],\n                  'output':[0, 1]}\n\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7d22\u5f15\u4fe1\u606f\uff0c\u6307\u5b9a\u540d\u5b57\n\u5bf9\u4e8e",(0,r.kt)("inlineCode",{parentName:"li"},"input_1"),"\uff0c\u6307\u5b9a\u52a8\u6001\u7ef40\u30011\u30012\u7684\u540d\u5b57\u5206\u522b\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"batch"),"\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"width"),"\u3001",(0,r.kt)("inlineCode",{parentName:"li"},"height"),"\uff0c\u5176\u4ed6\u8f93\u5165\u540c\u7406")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dynamic_axes = {'input_1':{0:'batch',\n                             1:'width',\n                             2:'height'},\n                  'input_2':{0:'batch'},\n                  'output':{0:'batch',\n                            1:'detections'}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5c06\u4e0a\u9762\u4e24\u8005\u8fdb\u884c\u6df7\u7528")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"dynamic_axes = {'input_1':[0, 2, 3],\n                  'input_2':{0:'batch'},\n                  'output':[0,1]}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5e26\u6709\u53ef\u9009\u53c2\u6570\u7684\u5bfc\u51fa\n\u4f8b\u5982\u60f3\u547d\u540d\u8f93\u5165\u8f93\u51fatensor\u540d\u5b57\u6216\u8005\u6bd4\u8f83\u8d85\u524d\u7684op\u53ef\u4ee5\u52a0\u4e0a",(0,r.kt)("inlineCode",{parentName:"li"},"torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import torch\nimport torch.onnx\ntorch_model = ...\n# set the model to inference mode\ntorch_model.eval()\ndummy_input = torch.randn(1,3,244,244)\ntorch.onnx.export(torch_model,dummy_input,"test.onnx",\n                    opset_version=11,input_names=["input"],output_names=["output"],operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"torch.no_grad()\u62a5\u9519\ntorch 1.6 \u7248\u672c\u540e\uff0c\u9700\u8981",(0,r.kt)("inlineCode",{parentName:"li"},"with torch.no_grad()"),",\u5373")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import torch\nimport torch.onnx\ntorch_model = ...\n# set the model to inference mode\ntorch_model.eval()\ndummy_input = torch.randn(1,3,244,244)\nwith torch.no_grad():\n    torch.onnx.export(torch_model,dummy_input,"test.onnx",\n                        opset_version=11,input_names=["input"],output_names=["output"],operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK)\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"\u8b66\u544a"),"\uff1a\u5982\u679c\u4e0d\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"with torch.no_grad()"),"\uff0c\u5219\u4f1a\u62a5\u4ee5\u4e0b\u9519\u8bef"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'RuntimeError: isDifferentiableType(variable.scalar_type()) INTERNAL ASSERT FAILED at "/pytorch/torch/csrc/autograd/functions/utils.h":59, please report a bug to PyTorch.')),(0,r.kt)("h1",{id:"2-\u5206\u6790\u5de5\u5177"},"2. \u5206\u6790\u5de5\u5177"),(0,r.kt)("h2",{id:"21-wb_analyse-\u5206\u6790\u5de5\u5177"},"2.1 wb_analyse \u5206\u6790\u5de5\u5177"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#                         \u539f\u59cb\u6d6e\u70b9\u57fa\u7ebf\u6743\u91cd pth          \u5206\u6790\u65e5\u5fd7\u4fdd\u5b58\u5730\u5740\nlinger.wb_analyse('data.ignore/tool_test.pt',  'data.ignore/wb_anylse.log')\n#-------------------------------------------------------------------------------------\n")),(0,r.kt)("p",null,"\u6216\u8005\u91c7\u7528\u5982\u4e0b\u7684\u65b9\u6cd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ncheckpoint = torch.load(\"best_checkpoint.pth\")\n\ncheckpoint = checkpoint['state_dict']\n#                  \u4e5f\u53ef\u4ee5\u4f20\u5165\u52a0\u8f7d\u540e\u7684pth     \u5206\u6790\u65e5\u5fd7\u4fdd\u5b58\u5730\u5740\u9ed8\u8ba4\u4e3a./wb_analyse.log\nlinger.wb_analyse(checkpoint)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'''\n\u65e5\u5fd7\u5982\u4e0b\u6240\u793a  Multiple = Max / Mean , Versu = Max / Dynamic \n+-------------------------------------------------------+--------------------+--------------------+-----------------+--------------------+-----------------+\n|                       Layer_name                      |        Mean        |        Max         |     Multiple    |    Dynamic 0.99    |      Versu      |\n+-------------------------------------------------------+--------------------+--------------------+-----------------+--------------------+-----------------+\n|               encoder.conv1.conv.weight               |   tensor(0.8093)   |   tensor(4.0748)   |  tensor(5.0348) |   tensor(3.2437)   |  tensor(1.2562) |\n|                encoder.conv1.conv.bias                |   tensor(0.1000)   |   tensor(0.1000)   |  tensor(1.0000) |   tensor(0.1000)   |    tensor(1.)   |\n|                encoder.conv1.bn.weight                |   tensor(0.4724)   |   tensor(1.2380)   |  tensor(2.6208) |   tensor(1.0338)   |  tensor(1.1975) |\n|                 encoder.conv1.bn.bias                 |   tensor(0.3030)   |   tensor(1.9110)   |  tensor(6.3075) |   tensor(1.5030)   |  tensor(1.2714) |\n|          encoder.conv1.bn.num_batches_tracked         |  tensor(6185962)   |  tensor(6185962)   |    tensor(1.)   |  tensor(6185962)   |    tensor(1.)   |\n+-------------------------------------------------------+--------------------+--------------------+-----------------+--------------------+-----------------+\n'''\n")),(0,r.kt)("h2",{id:"22-out_analyse-\u5206\u6790\u5de5\u5177"},"2.2 out_analyse \u5206\u6790\u5de5\u5177"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(\u521d\u7248\uff0c\u590d\u6742\u6a21\u578b\u53ef\u80fd\u4e0d\u9002\u7528)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5206\u6790\u7f51\u7edc\u6bcf\u4e00\u5c42\u7684\u8f93\u51fa\u5206\u5e03\uff0c\u65e5\u5fd7\u5f62\u5f0f\u540c\u6743\u91cd\u5206\u6790\u65e5\u5fd7")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'model = resnet50().cuda()\n### \u52a0\u8f7d\u8bad\u7ec3\u597d\u7684\u6d6e\u70b9checkpoint\nmodel.load_state_dict(checkpoint)\n### \u7ed9\u5b9a\u4e00\u4e2a\u7f51\u7edc\u7684\u771f\u5b9e\u7684\u5178\u578b\u8f93\u5165\uff0c\u4e0d\u8981\u7528\u968f\u673a\u6570\u636e\ntypical_input = torch.randn([1,3,224,224]).cuda()\n\nwith linger.Dumper() as dumper:\n    # model.eval()\n    dumper.analyse_layer_output(model,match_pattern="root.")   # match_pattern \u53ef\u652f\u6301\u67e5\u770b\u5bf9\u5e94\u54ea\u4e9b\u5c42\n    model(typical_input) #\u8dd1\u4e00\u904d\u524d\u5411\n    dumper.save_out_analyse_log(save_log_path="Analyse_layer_output.log") #\u65e5\u5fd7\u4fdd\u5b58\u8def\u5f84\n## \u6b64\u63a5\u53e3\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210\u4e00\u4e2a\u540d\u4e3a"Analyse_layer_output.log"\u7684\u6587\u4ef6\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6839\u636e\u65e5\u5fd7\u4e2dMultiple = Max / Mean , Versu = Max / Dynamic0.99 \u4e24\u4e2a\u7684\u6570\u503c\u8fdb\u884c\u5206\u6790"),(0,r.kt)("li",{parentName:"ul"},"\u4e00\u822c\u60c5\u51b5\u5e0c\u671b\u8f93\u51fa\u5206\u5e03\u7684\u5747\u503c\u548c\u6700\u503c\u4e0d\u8981\u76f8\u5dee\u592a\u5927  \u8fd9\u4e24\u4e2a\u500d\u6570\u4f9b\u53c2\u8003"),(0,r.kt)("li",{parentName:"ul"},"\u5f53Versu\u5927\u4e8e10\u500d\u65f6\uff0c\u8bf4\u660e\u6b64\u5c42\u8f93\u51fa\u7684\u5206\u5e03\u6700\u503c\u6709\u660e\u663e\u5f02\u5e38\uff0c\u5bf9\u91cf\u5316\u5f88\u4e0d\u53cb\u597d  \uff0c\u65e5\u5fd7\u4e2d\u4f1a\u5728\u6b64\u5c42\u6570\u636e\u4e0b\u9762\u6253\u5370\uff01\uff01\uff01\u63d0\u793a"),(0,r.kt)("li",{parentName:"ul"},"\u4e00\u822c\u63a8\u8350\u5bf9\u4e8e\u5f02\u5e38\u5c42\u6765\u8bf4\uff0c\u5bf9\u5176\u8fdb\u884c\u7cbe\u7ec6\u7684normalize\u7ea6\u675f\u8bbe\u7f6e\uff0c\u5411\u5747\u503c\u65b9\u5411\u7ea6\u675f\uff08\u4e0d\u4ee3\u8868\u7ea6\u675f\u5230\u5747\u503c\uff09\uff0c\u76ee\u7684\u4ec5\u4e3a\u62b9\u9664\u5f02\u5e38\u7684\u6700\u503c\u5373\u53ef")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"'''\n\u65e5\u5fd7\u5982\u4e0b\u6240\u793a  Multiple = Max / Mean , Versu = Max / Dynamic \n+----------------------------+----------------+-----------------+--------------------+----------------+--------------------+\n|         Layer_name         |      Mean      |       Max       | Multiple(Max/Mean) |  Dynamic 0.99  | Versu(Max/Dynamic) |\n+----------------------------+----------------+-----------------+--------------------+----------------+--------------------+\n|         root.conv1         | tensor(0.7991) |  tensor(4.9494) |   tensor(6.1935)   | tensor(1.6482) |   tensor(3.0028)   |\n|          root.bn1          | tensor(1.1000) | tensor(11.8600) |  tensor(10.7815)   | tensor(2.5022) |   tensor(4.7399)   |\n|         root.relu          | tensor(0.4383) |  tensor(7.7810) |  tensor(17.7513)   | tensor(0.8851) |   tensor(8.7912)   |\n|        root.maxpool        | tensor(0.3245) |  tensor(7.7810) |  tensor(23.9802)   | tensor(0.8358) |   tensor(9.3091)   |\n|    root.layer1.0.conv1     | tensor(0.7606) |  tensor(7.7810) |  tensor(10.2294)   | tensor(1.4041) |   tensor(5.5418)   |\n|     root.layer1.0.bn1      | tensor(0.6418) |  tensor(4.2427) |   tensor(6.6106)   | tensor(1.5714) |   tensor(2.7000)   |\n|     root.layer1.0.relu     | tensor(0.3977) |  tensor(2.7954) |   tensor(7.0291)   | tensor(0.8981) |   tensor(3.1128)   |\n|    root.layer1.0.conv2     | tensor(0.1164) |  tensor(2.7954) |  tensor(24.0151)   | tensor(0.5088) |   tensor(5.4937)   |\n+----------------------------+----------------+-----------------+--------------------+----------------+--------------------+\n'''\n")),(0,r.kt)("h2",{id:"23-linger\u5bfc\u56fe\u9519\u4e71\u53ca\u5176\u89e3\u51b3\u65b9\u6cd5"},"2.3 linger\u5bfc\u56fe\u9519\u4e71\u53ca\u5176\u89e3\u51b3\u65b9\u6cd5"),(0,r.kt)("p",null,"linger \u5bfc\u51fa\u7684 onnx \u56fe\u4e2d dequant \u9519\u4e71 \u6216\u8005 \u56fe\u4e2d\u8282\u70b9\u6709\u65ad\u88c2\uff0c\u53ef\u53c2\u7167\u4e0b\u9762\u8fc7\u7a0b\u64cd\u4f5c"),(0,r.kt)("h3",{id:"231-\u8c03\u8bd5\u9009\u9879"},"2.3.1 \u8c03\u8bd5\u9009\u9879"),(0,r.kt)("p",null,"torch.onnx.export\u63d0\u4f9b\u4ee5\u4e0b\u9009\u9879\u4f9b\u8c03\u8bd5\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"is_update_dequant = True      # \u8bbe\u4e3aFalse\uff0c\u5173\u95ed\u6dfb\u52a0dequant\u8282\u70b9\uff08&\u5220\u9664identity\u7ed3\u70b9\uff09\u7684\u8fc7\u7a0b  "),(0,r.kt)("li",{parentName:"ul"},"is_scoped_info    = True      # \u8bbe\u4e3aFalse\uff0c\u5173\u95ed\u6dfb\u52a0\u548c\u5220\u9664\u8282\u70b9scope name\u4fe1\u606f\u7684\u8fc7\u7a0b  "),(0,r.kt)("li",{parentName:"ul"},"debug_dump        = False     # \u8bbe\u4e3aTrue\uff0c\u4fdd\u5b58\u4e2d\u95f4\u5404\u6b65\u7684onnx\u7ed3\u679c\uff0c\u4ec5\u4f9b\u8c03\u8bd5\u4f7f\u7528, \uff08\u5efa\u8bae\u4f7f\u7528\u6b64\u9009\u9879\u65f6\u4e0d\u8981\u5bf9\u4ee5\u4e0a\u4e24\u4e2a\u9009\u9879\u505a\u4fee\u6539\uff09")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'dummy_input = torch.ones(1,3,224,224)  #\u6a21\u62df\u8f93\u5165\nwith torch.no_grad():\n        linger.onnx.export_debug(net, dummy_input,"export_debug.onnx",export_params=True,opset_version=12,operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK,is_update_dequant = False,is_scoped_info=False,debug_dump=False)\n')),(0,r.kt)("h3",{id:"232-\u65e7\u7248linger\u5bfc\u56fe\u9519\u8bef"},"2.3.2 \u65e7\u7248linger\u5bfc\u56fe\u9519\u8bef"),(0,r.kt)("p",null,"\u5f53\u4f7f\u7528\u65e7\u7248linger\u5bfc\u51fa\u7684onnx\u56fe\u4e2d\u4ec5\u6709 dequant\u6dfb\u52a0\u9519\u4e71\u60c5\u51b5 \uff0c\u53ef\u53c2\u7167\u4e0b\u9762\u8fc7\u7a0b\u4fee\u590d"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"conda create \u65b0\u73af\u5883 \u5b89\u88c5\u6700\u65b0\u7248linger (\u65b9\u6cd5\u4ec5\u4f9b\u53c2\u8003\uff0c\u4fdd\u8bc1\u6709\u4e00\u4e2a\u6700\u65b0\u7248\u7684linger\u7248\u672c\u5373\u53ef)"),(0,r.kt)("li",{parentName:"ul"},"linger.fix_dequant(ori_onnx, False)   ##\u539f\u59cb\u51fa\u9519\u7684onnx\u6a21\u578b\u540d\u79f0 | \u662f\u5426\u68c0\u6d4b\u4fee\u590d\u540eonnxinfer\u80fd\u5426\u8fd0\u884c(\u8bbeTrue\u65f6\u9700\u5df2\u5b89\u88c5onnxinfer)"),(0,r.kt)("li",{parentName:"ul"},"\u6700\u540e\u5c06\u4fee\u590d\u597d\u7684onnx\u4fdd\u5b58\u4e3a \u540e\u7f00\u591a\u4e86_fix.onnx")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'##                    \u539f\u59cb\u51fa\u9519\u7684onnx\u6a21\u578b\u540d\u79f0      | \u662f\u5426\u68c0\u6d4b\u4fee\u590d\u540eonnxinfer\u80fd\u5426\u8fd0\u884c\nlinger.fix_dequant("dbpagec2_wrong.onnx",            False)\n')))}u.isMDXComponent=!0}}]);