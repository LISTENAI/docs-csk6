"use strict";(self.webpackChunkls_docs_web=self.webpackChunkls_docs_web||[]).push([[7403],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>u});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),d=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=d(a),u=n,k=c["".concat(o,".").concat(u)]||c[u]||p[u]||i;return a?r.createElement(k,l(l({ref:t},h),{},{components:a})):r.createElement(k,l({ref:t},h))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var d=2;d<i;d++)l[d]=a[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},66676:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=a(87462),n=(a(67294),a(3905));const i={},l="\u7ebf\u7a0b",s={unversionedId:"chips/600X/kernel/threads",id:"chips/600X/kernel/threads",isDocsHomePage:!1,title:"\u7ebf\u7a0b",description:"\u6982\u8ff0",source:"@site/docs/chips/600X/kernel/threads.md",sourceDirName:"chips/600X/kernel",slug:"/chips/600X/kernel/threads",permalink:"/docs-csk6/chips/600X/kernel/threads",version:"current",frontMatter:{},sidebar:"docs/chips/600X",previous:{title:"\u5185\u6838",permalink:"/docs-csk6/chips/600X/kernel/index"},next:{title:"\u7cfb\u7edf\u7ebf\u7a0b",permalink:"/docs-csk6/chips/600X/kernel/system_threads"}},o=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",children:[]},{value:"\u751f\u547d\u5468\u671f",id:"\u751f\u547d\u5468\u671f",children:[{value:"\u7ebf\u7a0b\u521b\u5efa",id:"\u7ebf\u7a0b\u521b\u5efa",children:[]}]},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",children:[{value:"\u7ebf\u7a0b\u7ed3\u675f",id:"\u7ebf\u7a0b\u7ed3\u675f",children:[]},{value:"\u7ebf\u7a0b\u4e2d\u6b62 Thread Aborting",id:"\u7ebf\u7a0b\u4e2d\u6b62-thread-aborting",children:[]},{value:"\u7ebf\u7a0b\u6302\u8d77 Thread Suspension",id:"\u7ebf\u7a0b\u6302\u8d77-thread-suspension",children:[]},{value:"\u7ebf\u7a0b\u72b6\u6001 Thread States",id:"\u7ebf\u7a0b\u72b6\u6001-thread-states",children:[]}]},{value:"\u7ebf\u7a0b\u6808\u5bf9\u8c61 Thread Stack objects",id:"\u7ebf\u7a0b\u6808\u5bf9\u8c61-thread-stack-objects",children:[{value:"\u5185\u6838\u6808 Kernel-only Stacks",id:"\u5185\u6838\u6808-kernel-only-stacks",children:[]},{value:"\u7ebf\u7a0b\u6808 Thread stacks",id:"\u7ebf\u7a0b\u6808-thread-stacks",children:[]},{value:"\u7ebf\u7a0b\u4f18\u5148\u7ea7 Thread Priorities",id:"\u7ebf\u7a0b\u4f18\u5148\u7ea7-thread-priorities",children:[]}]},{value:"\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e Thread Custom Data",id:"\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e-thread-custom-data",children:[]}],d={toc:o};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"\u7ebf\u7a0b"},"\u7ebf\u7a0b"),(0,n.kt)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,n.kt)("p",null,"This section describes kernel services for creating, scheduling, and deleting independently executable threads of instructions."),(0,n.kt)("p",null,"A\xa0",(0,n.kt)("em",{parentName:"p"},"thread"),"\xa0is a kernel object that is used for application processing that is too lengthy or too complex to be performed by an ISR."),(0,n.kt)("p",null,"Any number of threads can be defined by an application (limited only by available RAM). Each thread is referenced by a ",(0,n.kt)("em",{parentName:"p"},"thread id")," that is assigned when the thread is spawned\u3002"),(0,n.kt)("p",null,"\u672c\u8282\u4e3b\u8981\u63cf\u8ff0\u7ebf\u7a0b\u7684\u521b\u5efa\u3001\u8c03\u5ea6\u548c\u5220\u9664\u3002"),(0,n.kt)("p",null,"\u7ebf\u7a0b\u4f5c\u4e3a\u4e00\u4e2a\u5185\u6838\u5bf9\u8c61\uff0c\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u8fc7\u4e8e\u5197\u4f59\u590d\u6742\u7684\u5e94\u7528\u7a0b\u5e8f\u3002"),(0,n.kt)("p",null,"\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684\u7ebf\u7a0b(\u53d7RAM\u7684\u9650\u5236)\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u53ef\u901a\u8fc7\u7ebf\u7a0b id\u8fdb\u884c\u5f15\u7528\uff0c\u8fd9\u4e2a\u7ebf\u7a0b id \u662f\u5728\u7ebf\u7a0b\u4ea7\u751f\u65f6\u5206\u914d\u7684\u3002"),(0,n.kt)("p",null,"A thread has the following key properties:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("strong",{parentName:"li"},"stack area"),", which is a region of memory used for the thread\u2019s stack. The\xa0",(0,n.kt)("strong",{parentName:"li"},"size"),"\xa0of the stack area can be tailored to conform to the actual needs of the thread\u2019s processing. Special macros exist to create and work with stack memory regions."),(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("strong",{parentName:"li"},"thread control block"),"\xa0for private kernel bookkeeping of the thread\u2019s metadata. This is an instance of type\xa0",(0,n.kt)("a",{parentName:"li",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread%20%22k_thread%22"},"k_thread"),"."),(0,n.kt)("li",{parentName:"ul"},"An\xa0",(0,n.kt)("strong",{parentName:"li"},"entry point function"),", which is invoked when the thread is started. Up to 3\xa0",(0,n.kt)("strong",{parentName:"li"},"argument values"),"\xa0can be passed to this function."),(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("strong",{parentName:"li"},"scheduling priority"),", which instructs the kernel\u2019s scheduler how to allocate CPU time to the thread. (See\xa0",(0,n.kt)("a",{parentName:"li",href:"https://docs.zephyrproject.org/latest/kernel/services/scheduling/index.html#scheduling-v2"},"Scheduling"),".)"),(0,n.kt)("li",{parentName:"ul"},"A set of\xa0",(0,n.kt)("strong",{parentName:"li"},"thread options"),", which allow the thread to receive special treatment by the kernel under specific circumstances. (See\xa0",(0,n.kt)("a",{parentName:"li",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#thread-options-v2"},"Thread Options"),".)"),(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("strong",{parentName:"li"},"start delay"),", which specifies how long the kernel should wait before starting the thread.")),(0,n.kt)("p",null,"\u7ebf\u7a0b\u5177\u6709\u4ee5\u4e0b\u5173\u952e\u5c5e\u6027:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u6808\u533a\u57df\uff1a\u7528\u4e8e\u7ebf\u7a0b\u7684\u6808\u533a\u57df\u3002Zephyr\u63d0\u4f9b\u4e00\u4e9b\u5b8f\u6765\u5b9a\u4e49\u7ebf\u7a0b\u6808\u533a\u57df\u3002"),(0,n.kt)("li",{parentName:"ul"},"\u7ebf\u7a0b\u63a7\u5236\u5757\uff1a\u7528\u4e8e\u7ba1\u7406\u7ebf\u7a0b\u7684\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u3002\u8be6\u89c1",(0,n.kt)("inlineCode",{parentName:"li"},"k_thread"),"\u3002"),(0,n.kt)("li",{parentName:"ul"},"\u5165\u53e3\u51fd\u6570\uff1a\u7ebf\u7a0b\u542f\u52a8\u65f6\u8c03\u7528\u7684\u51fd\u6570\u3002\u8be5\u51fd\u6570\u6700\u591a\u80fd\u63a5\u6536 3 \u4e2a\u53c2\u6570\u3002"),(0,n.kt)("li",{parentName:"ul"},"\u8c03\u5ea6\u4f18\u5148\u7ea7\uff1a\u6307\u793a\u5185\u6838\u7684\u8c03\u5ea6\u5668\u5982\u4f55\u7ed9\u8be5\u7ebf\u7a0b\u5206\u914d CPU \u65f6\u95f4\u3002"),(0,n.kt)("li",{parentName:"ul"},"\u542f\u52a8\u65f6\u5ef6\uff1a\u7ebf\u7a0b\u5728\u542f\u52a8\u524d\u9700\u8981\u7b49\u5f85\u7684\u65f6\u95f4\u3002")),(0,n.kt)("h2",{id:"\u751f\u547d\u5468\u671f"},"\u751f\u547d\u5468\u671f"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u521b\u5efa"},"\u7ebf\u7a0b\u521b\u5efa"),(0,n.kt)("p",null,"A thread must be created before it can be used. The kernel initializes the thread control block as well as one end of the stack portion. The remainder of the thread\u2019s stack is typically left uninitialized."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u5fc5\u987b\u5148\u521b\u5efa\u3001\u518d\u4f7f\u7528\u3002\u521b\u5efa\u7ebf\u7a0b\u65f6\uff0c\u5185\u6838\u5c06\u521d\u59cb\u5316\u7ebf\u7a0b\u6808\u533a\u57df\u7684\u63a7\u5236\u5757\u533a\u57df\u4ee5\u53ca\u6808\u5e95\u3002\u6808\u533a\u57df\u7684\u5176\u5b83\u90e8\u5206\u901a\u5e38\u90fd\u662f\u672a\u521d\u59cb\u5316\u7684\u3002"),(0,n.kt)("p",null,"Specifying a start delay of\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/timing/clocks.html#c.K_NO_WAIT%20%22K_NO_WAIT%22"},"K_NO_WAIT"),"\xa0instructs the kernel to start thread execution immediately. Alternatively, the kernel can be instructed to delay execution of the thread by specifying a timeout value \u2013 for example, to allow device hardware used by the thread to become available."),(0,n.kt)("p",null,"\u5982\u679c\u7ebf\u7a0b\u7684\u542f\u52a8\u65f6\u5ef6\u662f",(0,n.kt)("inlineCode",{parentName:"p"},"K_NO_WAIT"),"\uff0c\u5185\u6838\u5c06\u7acb\u5373\u542f\u52a8\u7ebf\u7a0b\u3002\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u8d85\u65f6\u65f6\u95f4\uff0c\u8ba9\u5185\u6838\u5ef6\u8fdf\u542f\u52a8\u8be5\u7ebf\u7a0b\u3002\u4f8b\u5982\uff0c\u8ba9\u7ebf\u7a0b\u9700\u8981\u4f7f\u7528\u7684\u8bbe\u5907\u5c31\u7eea\u540e\u518d\u542f\u52a8\u7ebf\u7a0b\u3002"),(0,n.kt)("p",null,"The kernel allows a delayed start to be canceled before the thread begins executing. A cancellation request has no effect if the thread has already started. A thread whose delayed start was successfully canceled must be re-spawned before it can be used."),(0,n.kt)("p",null,"\u5982\u679c\u5ef6\u8fdf\u542f\u52a8\u7684\u7ebf\u7a0b\u8fd8\u672a\u542f\u52a8\uff0c\u5185\u6838\u53ef\u4ee5\u53d6\u6d88\u8be5\u7ebf\u7a0b\u3002\u5982\u679c\u7ebf\u7a0b\u5df2\u7ecf\u542f\u52a8\u4e86\uff0c\u5219\u5185\u6838\u5728\u5c1d\u8bd5\u53d6\u6d88\u5b83\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u6548\u679c\u3002\u5982\u679c\u5ef6\u8fdf\u542f\u52a8\u7684\u7ebf\u7a0b\u88ab\u6210\u529f\u5730\u53d6\u6d88\u4e86\uff0c\u5b83\u5fc5\u987b\u88ab\u518d\u6b21\u521b\u5efa\u540e\u624d\u80fd\u518d\u6b21\u4f7f\u7528\u3002"),(0,n.kt)("h2",{id:"\u4ee3\u7801\u5b9e\u73b0"},"\u4ee3\u7801\u5b9e\u73b0"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u7ed3\u675f"},"\u7ebf\u7a0b\u7ed3\u675f"),(0,n.kt)("p",null,"Once a thread is started it typically executes forever. However, a thread may synchronously end its execution by returning from its entry point function. This is known as\xa0",(0,n.kt)("strong",{parentName:"p"},"termination"),"."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u4e00\u65e6\u542f\u52a8\uff0c\u5b83\u901a\u5e38\u4f1a\u4e00\u76f4\u8fd0\u884c\u4e0b\u53bb\u3002\u4e0d\u8fc7\uff0c\u7ebf\u7a0b\u4e5f\u53ef\u4ee5\u4ece\u5b83\u7684\u5165\u53e3\u70b9\u51fd\u6570\u4e2d\u8fd4\u56de\uff0c\u4ece\u800c\u7ed3\u675f\u6267\u884c\u3002\u8fd9\u79cd\u7ed3\u675f\u65b9\u5f0f\u53eb\u505a\xa0",(0,n.kt)("strong",{parentName:"p"},"\u6b63\u5e38\u7ed3\u675f(terminaltion)"),"\u3002"),(0,n.kt)("p",null,"A thread that terminates is responsible for releasing any shared resources it may own (such as mutexes and dynamically allocated memory) prior to returning, since the kernel does\xa0",(0,n.kt)("em",{parentName:"p"},"not"),"\xa0reclaim them automatically."),(0,n.kt)("p",null,"\u6b63\u5e38\u7ed3\u675f\u7684\u7ebf\u7a0b\u9700\u8981\u5728\u8fd4\u56de\u524d\u91ca\u653e\u5b83\u6240\u62e5\u6709\u7684\u5171\u4eab\u8d44\u6e90(\u4f8b\u5982\u4e92\u65a5\u91cf\u3001\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58)\u3002\u5185\u6838\u4e0d\u4f1a\u81ea\u52a8\u56de\u6536\u8fd9\u4e9b\u8d44\u6e90\u3002"),(0,n.kt)("p",null,"In some cases a thread may want to sleep until another thread terminates. This can be accomplished with the\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_join%20%22k_thread_join%22"},"k_thread_join()"),"\xa0API. This will block the calling thread until either the timeout expires, the target thread self-exits, or the target thread aborts (either due to a\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_abort%20%22k_thread_abort%22"},"k_thread_abort()"),"\xa0call or triggering a fatal error)."),(0,n.kt)("p",null,"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u60f3\u7761\u7720\u76f4\u5230\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u7ed3\u675f\u3002\u8fd9\u4e2a\u529f\u80fd\u53ef\u4ee5\u901a\u8fc7",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_join()")," \u6765\u5b9e\u73b0\u3002\u8fd9\u5c06\u963b\u585e\u8c03\u7528\u7ebf\u7a0b\uff0c\u76f4\u5230\u8d85\u65f6\u5230\u671f\u3001\u76ee\u6807\u7ebf\u7a0b\u9000\u51fa\u6216\u76ee\u6807\u7ebf\u7a0b\u4e2d\u6b62(\u7531\u4e8e",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_abort()"),"\u8c03\u7528\u6216\u89e6\u53d1\u81f4\u547d\u9519\u8bef)\u3002"),(0,n.kt)("p",null,"Once a thread has terminated, the kernel guarantees that no use will be made of the thread struct. The memory of such a struct can then be re-used for any purpose, including spawning a new thread. "),(0,n.kt)("p",null,"Note that the thread must be fully terminated, which presents race conditions where a thread\u2019s own logic signals completion which is seen by another thread before the kernel processing is complete. Under normal circumstances, application code should use\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_join%20%22k_thread_join%22"},"k_thread_join()"),"\xa0or\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_abort%20%22k_thread_abort%22"},"k_thread_abort()"),"\xa0to synchronize on thread termination state and not rely on signaling from within application logic."),(0,n.kt)("p",null,"\u4e00\u65e6\u7ebf\u7a0b\u7ed3\u675f\uff0c\u5185\u6838\u4fdd\u8bc1\u4e0d\u4f1a\u4f7f\u7528\u8be5\u7ebf\u7a0b\u7ed3\u6784\u3002\u8fd9\u5757\u7ed3\u6784\u7684\u5185\u5b58\u53ef\u88ab\u91cd\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5305\u62ec\u521b\u5efa\u65b0\u7ebf\u7a0b\u3002"),(0,n.kt)("p",null,"\u4e0d\u5efa\u8bae\u4f7f\u7528\u5185\u90e8\u903b\u8f91\u4fe1\u53f7\u6765\u5224\u65ad\u7ebf\u7a0b\u662f\u5426\u7ed3\u675f\uff0c\u8fd9\u6837\u4e0d\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u5b8c\u5168\u7ec8\u6b62\uff0c\u5185\u6838\u53ef\u80fd\u4ecd\u5728\u4f7f\u7528\u8be5\u7ebf\u7a0b\u7ed3\u6784\u7684\u5185\u5b58\uff0c\u51fa\u73b0\u7ade\u4e89\u6761\u4ef6\u3002\u5728\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u5e94\u8be5\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_join()"),"\u6216",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_abort()"),"\u540c\u6b65\u7684\u7ed3\u675f\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u5185\u90e8\u7684\u4fe1\u53f7\u3002"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u4e2d\u6b62-thread-aborting"},"\u7ebf\u7a0b\u4e2d\u6b62 Thread Aborting"),(0,n.kt)("p",null,"A thread may asynchronously end its execution by\xa0",(0,n.kt)("strong",{parentName:"p"},"aborting"),". The kernel automatically aborts a thread if the thread triggers a fatal error condition, such as dereferencing a null pointer."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7\xa0",(0,n.kt)("strong",{parentName:"p"},"\u5f02\u5e38\u4e2d\u6b62 (aborting)"),"\xa0\u5f02\u6b65\u7ed3\u675f\u5176\u6267\u884c\u3002\u5982\u679c\u7ebf\u7a0b\u89e6\u53d1\u4e86\u4e00\u4e2a\u81f4\u547d\u9519\u8bef(\u4f8b\u5982\u5f15\u7528\u4e86\u7a7a\u6307\u9488)\uff0c\u5185\u6838\u5c06\u81ea\u52a8\u4e2d\u6b62\u8be5\u7ebf\u7a0b\u3002"),(0,n.kt)("p",null,"A thread can also be aborted by another thread (or by itself) by calling\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_abort%20%22k_thread_abort%22"},"k_thread_abort()"),". However, it is typically preferable to signal a thread to terminate itself gracefully, rather than aborting it."),(0,n.kt)("p",null,"\u5176\u5b83\u7ebf\u7a0b(\u6216\u7ebf\u7a0b\u81ea\u5df1)\u53ef\u4ee5\u8c03\u7528\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_abort()"),"\xa0\u4e2d\u6b62\u4e00\u4e2a\u7ebf\u7a0b\u3002\u4e0d\u8fc7\uff0c\u66f4\u4f18\u96c5\u7684\u505a\u6cd5\u662f\u5411\u7ebf\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c\u8ba9\u8be5\u7ebf\u7a0b\u81ea\u5df1\u7ed3\u675f\u6267\u884c\u3002"),(0,n.kt)("p",null,"As with thread termination, the kernel does not reclaim shared resources owned by an aborted thread."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u7ed3\u675f\u65f6\uff0c\u5185\u6838\u4e0d\u4f1a\u81ea\u52a8\u56de\u6536\u8be5\u7ebf\u7a0b\u62e5\u6709\u7684\u5171\u4eab\u8d44\u6e90\u3002"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u6302\u8d77-thread-suspension"},"\u7ebf\u7a0b\u6302\u8d77 Thread Suspension"),(0,n.kt)("p",null,"A thread can be prevented from executing for an indefinite period of time if it becomes\xa0",(0,n.kt)("strong",{parentName:"p"},"suspended"),". The function\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_suspend%20%22k_thread_suspend%22"},"k_thread_suspend()"),"\xa0can be used to suspend any thread, including the calling thread. Suspending a thread that is already suspended has no additional effect."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u88ab\u6302\u8d77(suspended)\uff0c\u5b83\u5c06\u5728\u82e5\u5e72\u5468\u671f\u5185\u5185\u6682\u505c\u6267\u884c\u3002\u51fd\u6570",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_suspend()"),"\u53ef\u4ee5\u7528\u4e8e\u6302\u8d77\u5305\u62ec\u8c03\u7528\u7ebf\u7a0b\u5728\u5185\u7684\u6240\u6709\u7ebf\u7a0b\u3002\u5bf9\u5df2\u7ecf\u6302\u8d77\u7684\u7ebf\u7a0b\u518d\u6b21\u6302\u8d77\u65f6\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u6548\u679c\u3002"),(0,n.kt)("p",null,"Once suspended, a thread cannot be scheduled until another thread calls\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_resume%20%22k_thread_resume%22"},"k_thread_resume()"),"\xa0to remove the suspension."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u4e00\u65e6\u88ab\u6302\u8d77\uff0c\u5b83\u5c06\u4e00\u76f4\u4e0d\u80fd\u88ab\u8c03\u5ea6\uff0c\u9664\u975e\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u8c03\u7528\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_resume()"),"\xa0\u53d6\u6d88\u6302\u8d77\u3002"),(0,n.kt)("p",null,"NOTE\uff1aA thread can prevent itself from executing for a specified period of time using\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_sleep%20%22k_sleep%22"},"k_sleep()"),". However, this is different from suspending a thread since a sleeping thread becomes executable automatically when the time limit is reached."),(0,n.kt)("p",null,"\u6ce8\uff1a\u7ebf\u7a0b\u53ef\u4ee5\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"k_sleep()"),"\u7761\u7720\u4e00\u6bb5\u6307\u5b9a\u7684\u65f6\u95f4\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e0e\u6302\u8d77\u4e0d\u540c\uff0c\u7761\u7720\u7ebf\u7a0b\u5728\u7761\u7720\u65f6\u95f4\u5b8c\u6210\u540e\u4f1a\u81ea\u52a8\u8fd0\u884c\u3002"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u72b6\u6001-thread-states"},"\u7ebf\u7a0b\u72b6\u6001 Thread States"),(0,n.kt)("p",null,"A thread that has no factors that prevent its execution is deemed to be\xa0",(0,n.kt)("strong",{parentName:"p"},"ready"),", and is eligible to be selected as the current thread."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u6ca1\u6709\u5176\u4ed6\u6761\u4ef6\u963b\u6b62\u5b83\u8fd0\u884c\uff0c\u5219\u53ef\u8ba4\u4e3a\u8be5\u7ebf\u7a0b\u5904\u4e8e",(0,n.kt)("strong",{parentName:"p"},"\u5c31\u7eea\u72b6\u6001"),"\uff0c\u5177\u5907\u88ab\u8c03\u5ea6\u4e3a\u5f53\u524d\u7ebf\u7a0b\u7684\u6761\u4ef6\u3002"),(0,n.kt)("p",null,"A thread that has one or more factors that prevent its execution is deemed to be\xa0",(0,n.kt)("strong",{parentName:"p"},"unready"),", and cannot be selected as the current thread."),(0,n.kt)("p",null,"\u4e0d\u8bd1"),(0,n.kt)("p",null,"The following factors make a thread unready:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The thread has not been started."),(0,n.kt)("li",{parentName:"ul"},"The thread is waiting for a kernel object to complete an operation. (For example, the thread is taking a semaphore that is unavailable.)"),(0,n.kt)("li",{parentName:"ul"},"The thread is waiting for a timeout to occur."),(0,n.kt)("li",{parentName:"ul"},"The thread has been suspended."),(0,n.kt)("li",{parentName:"ul"},"The thread has terminated or aborted.")),(0,n.kt)("p",null,"\u6709\u4e0b\u9762\u56e0\u7d20\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u5904\u4e8e\u672a\u5c31\u7eea\u6001\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u672a\u5f00\u59cb"),(0,n.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u5728\u963b\u585e\u7b49\u5f85\u5176\u4ed6\u6761\u4ef6(\u6bd4\u5982\u8be5\u7ebf\u7a0b\u6b63\u5728\u7b49\u5f85\u83b7\u53d6\u4fe1\u53f7\u91cf)"),(0,n.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u7b49\u5f85\u8d85\u65f6\u6267\u884c"),(0,n.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u5df2\u7ecf\u88ab\u6302\u8d77"),(0,n.kt)("li",{parentName:"ul"},"\u8be5\u7ebf\u7a0b\u5df2\u7ecf\u7ed3\u675f\u6216\u4e2d\u6b62")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs.zephyrproject.org/latest/_images/thread_states.svg",alt:"Thread States"})),(0,n.kt)("h2",{id:"\u7ebf\u7a0b\u6808\u5bf9\u8c61-thread-stack-objects"},"\u7ebf\u7a0b\u6808\u5bf9\u8c61 Thread Stack objects"),(0,n.kt)("p",null,"Every thread requires its own stack buffer for the CPU to push context."),(0,n.kt)("p",null,"\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u9700\u6709\u4e00\u5757\u72ec\u5360\u7684\u5185\u5b58\u5757\u4fdd\u5b58\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u3002"),(0,n.kt)("p",null,"Depending on configuration, there are several constraints that must be met:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"There may need to be additional memory reserved for memory management structures"),(0,n.kt)("li",{parentName:"ul"},"If guard-based stack overflow detection is enabled, a small write- protected memory management region must immediately precede the stack buffer to catch overflows."),(0,n.kt)("li",{parentName:"ul"},"If userspace is enabled, a separate fixed-size privilege elevation stack must be reserved to serve as a private kernel stack for handling system calls."),(0,n.kt)("li",{parentName:"ul"},"If userspace is enabled, the thread\u2019s stack buffer must be appropriately sized and aligned such that a memory protection region may be programmed to exactly fit.")),(0,n.kt)("p",null,"\u6839\u636e\u914d\u7f6e\u7684\u4e0d\u540c\uff0c\u6709\u51e0\u4e2a\u5fc5\u987b\u6ee1\u8db3\u7684\u7ea6\u675f\u6761\u4ef6\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u53ef\u80fd\u9700\u8981\u4e3a\u7528\u4e8e\u5185\u5b58\u7ba1\u7406\u7684\u7ed3\u6784\u4f53\u4fdd\u7559\u989d\u5916\u7684\u5185\u5b58"),(0,n.kt)("li",{parentName:"ul"},"\u5982\u679c\u542f\u7528\u4e86\u57fa\u4e8e\u4fdd\u62a4\u7684\u6808\u6ea2\u51fa\u68c0\u6d4b\uff0c\u5219\u5fc5\u987b\u5728\u6808\u7f13\u51b2\u533a\u7684\u524d\u9762\u8bbe\u7f6e\u4e00\u4e2a\u5c0f\u7684\u5199\u4fdd\u62a4\u5185\u5b58\u7ba1\u7406\u533a\u57df\u6765\u6355\u83b7\u6ea2\u51fa\u3002")),(0,n.kt)("p",null,"The alignment constraints can be quite restrictive, for example some MPUs require their regions to be of some power of two in size, and aligned to its own size."),(0,n.kt)("p",null,"\u6682\u4e0d\u8bd1"),(0,n.kt)("p",null,"Because of this, portable code can\u2019t simply pass an arbitrary character buffer to\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html#c.k_thread_create%20%22k_thread_create%22"},"k_thread_create()"),". Special macros exist to instantiate stacks, prefixed with\xa0K_KERNEL_STACK\xa0and\xa0K_THREAD_STACK."),(0,n.kt)("p",null,"\u56e0\u6b64\uff0c\u53ef\u79fb\u690d\u4ee3\u7801\u4e0d\u80fd\u7b80\u5355\u5730\u5c06\u7f13\u51b2\u533a\u4f20\u9012\u7ed9",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_create()"),"\u3002\u9700\u8981\u4f7f\u7528\u5b9e\u4f8b\u5316\u5806\u6808\u7684\u7279\u6b8a\u5b8f\uff0c\u4ee5",(0,n.kt)("inlineCode",{parentName:"p"},"K_KERNEL_STACK"),"\u548c",(0,n.kt)("inlineCode",{parentName:"p"},"K_THREAD_STACK"),"\u4e3a\u524d\u7f00\u3002"),(0,n.kt)("h3",{id:"\u5185\u6838\u6808-kernel-only-stacks"},"\u5185\u6838\u6808 Kernel-only Stacks"),(0,n.kt)("p",null,"If it is known that a thread will never run in user mode, or the stack is being used for special contexts like handling interrupts, it is best to define stacks using the\xa0K_KERNEL_STACK\xa0macros."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u6c38\u8fdc\u4e0d\u4f1a\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u6216\u8005\u5806\u6808\u88ab\u7528\u4e8e\u5904\u7406\u4e2d\u65ad\u7b49\u7279\u6b8a\u60c5\u51b5\uff0c\u6700\u597d\u662f\u4f7f\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"K_KERNEL_STACK"),"\u5b8f\u6765\u5b9a\u4e49\u5806\u6808\u3002"),(0,n.kt)("p",null,"These stacks save memory because an MPU region will never need to be programmed to cover the stack buffer itself, and the kernel will not need to reserve additional room for the privilege elevation stack, or memory management data structures which only pertain to user mode threads."),(0,n.kt)("p",null,"\u8fd9\u4e9b\u5806\u6808\u8282\u7701\u5185\u5b58\uff0c\u56e0\u4e3a\u4e00\u4e2aMPU\u533a\u57df\u5c06\u6c38\u8fdc\u4e0d\u9700\u8981\u88ab\u7f16\u7a0b\u6765\u8986\u76d6\u5806\u6808\u672c\u8eab\uff0c\u800c\u4e14\u5185\u6838\u5c06\u4e0d\u9700\u8981\u4e3a\u7279\u6743\u63d0\u5347\u5806\u6808\u6216\u53ea\u5c5e\u4e8e\u7528\u6237\u6a21\u5f0f\u7ebf\u7a0b\u7684\u5185\u5b58\u7ba1\u7406\u6570\u636e\u7ed3\u6784\u9884\u7559\u989d\u5916\u7684\u7a7a\u95f4\u3002"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u6808-thread-stacks"},"\u7ebf\u7a0b\u6808 Thread stacks"),(0,n.kt)("p",null,"If it is known that a stack will need to host user threads, or if this cannot be determined, define the stack with\xa0K_THREAD_STACK\xa0macros. This may use more memory but the stack object is suitable for hosting user threads."),(0,n.kt)("p",null,"\u5982\u679c\u4e00\u4e2a\u5806\u6808\u9700\u8981\u627f\u8f7d\u7528\u6237\u7ebf\u7a0b\uff0c\u6216\u8005\u65e0\u6cd5\u786e\u5b9a\uff0c\u5c31\u7528",(0,n.kt)("inlineCode",{parentName:"p"},"K_THREAD_STACK"),"\u5b8f\u5b9a\u4e49\u5806\u6808\u3002\u8fd9\u53ef\u80fd\u4f1a\u4f7f\u7528\u66f4\u591a\u7684\u5185\u5b58\uff0c\u4f46\u5806\u6808\u5bf9\u8c61\u9002\u5408\u627f\u8f7d\u7528\u6237\u7ebf\u7a0b\u3002"),(0,n.kt)("p",null,"\u5728\u6ca1\u6709\u914d\u7f6e",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIG_USERSPACE"),"\u7684\u60c5\u51b5\u4e0b\uff0c\u7ebf\u7a0b\u6808\u7b49\u540c\u4e8e\u5185\u6838\u6808\u3002"),(0,n.kt)("h3",{id:"\u7ebf\u7a0b\u4f18\u5148\u7ea7-thread-priorities"},"\u7ebf\u7a0b\u4f18\u5148\u7ea7 Thread Priorities"),(0,n.kt)("p",null,"A thread\u2019s priority is an integer value, and can be either negative or non-negative. Numerically lower priorities takes precedence over numerically higher values. For example, the scheduler gives thread A of priority 4\xa0",(0,n.kt)("em",{parentName:"p"},"higher"),"\xa0priority over thread B of priority 7; likewise thread C of priority -2 has higher priority than both thread A and thread B."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\u6216\u8d1f\u6570\u7684\u3002\u6570\u503c\u8f83\u4f4e\u7684\u4f18\u5148\u7ea7\u4f18\u5148\u4e8e\u6570\u503c\u8f83\u9ad8\u7684\u503c\u3002\u4f8b\u5982\uff0c\u4f18\u5148\u7ea7\u4e3a4\u7684\u7ebf\u7a0bA\u6bd4\u4f18\u5148\u7ea7\u4e3a7\u7684\u7ebf\u7a0bB\u66f4\u9ad8\u7684\u4f18\u5148\u7ea7;\u540c\u6837\uff0c\u4f18\u5148\u7ea7\u4e3a-2\u7684\u7ebf\u7a0bC\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u7ebf\u7a0bA\u548c\u7ebf\u7a0bB\u3002"),(0,n.kt)("p",null,"The scheduler distinguishes between two classes of threads, based on each thread\u2019s priority."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("em",{parentName:"li"},"cooperative thread"),"\xa0has a negative priority value. Once it becomes the current thread, a cooperative thread remains the current thread until it performs an action that makes it unready."),(0,n.kt)("li",{parentName:"ul"},"A\xa0",(0,n.kt)("em",{parentName:"li"},"preemptible thread"),"\xa0has a non-negative priority value. Once it becomes the current thread, a preemptible thread may be supplanted at any time if a cooperative thread, or a preemptible thread of higher or equal priority, becomes ready.")),(0,n.kt)("p",null,"\u8c03\u5ea6\u7a0b\u5e8f\u6839\u636e\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\u533a\u5206\u4e24\u7c7b\u7ebf\u7a0b\uff1a"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u534f\u4f5c\u5f0f\u7ebf\u7a0b\u4f7f\u7528\u8d1f\u6570\u4f18\u5148\u7ea7\u6570\u503c\u3002\u4e00\u65e6\u53d8\u4e3a\u5f53\u524d\u7ebf\u7a0b\uff0c\u534f\u4f5c\u7ebf\u7a0b\u5c06\u4f1a\u6301\u7eed\u4fdd\u7559\uff0c\u76f4\u5230\u5b83\u6267\u884c\u52a8\u4f5c\u8fdb\u5165\u672a\u5c31\u7eea\u72b6\u6001\u3002"),(0,n.kt)("li",{parentName:"ul"},"\u62a2\u5360\u7ebf\u7a0b\u7684\u4f18\u5148\u7ea7\u662f",(0,n.kt)("strong",{parentName:"li"},"\u975e\u8d1f\u6570\u3002"),"\u4e00\u65e6\u53d8\u4e3a\u5f53\u524d\u7ebf\u7a0b\uff0c\u62a2\u5360\u7ebf\u7a0b\u53ef\u4ee5\u88ab\u9ad8\u4f18\u5148\u7ea7\u7684\u62a2\u5360\u7ebf\u7a0b\u548c\u534f\u4f5c\u7ebf\u7a0b\u62a2\u5360\u3002")),(0,n.kt)("p",null,"A thread\u2019s initial priority value can be altered up or down after the thread has been started. Thus it is possible for a preemptible thread to become a cooperative thread, and vice versa, by changing its priority."),(0,n.kt)("p",null,"\u7ebf\u7a0b\u7684\u521d\u59cb\u4f18\u5148\u7ea7\u503c\u53ef\u4ee5\u5728\u7ebf\u7a0b\u542f\u52a8\u540e\u66f4\u6539\u3002\u56e0\u6b64\uff0c\u901a\u8fc7\u6539\u53d8\u4f18\u5148\u7ea7\uff0c\u4e00\u4e2a\u53ef\u62a2\u5360\u5f0f\u7ebf\u7a0b\u6709\u53ef\u80fd\u6210\u4e3a\u4e00\u4e2a\u534f\u4f5c\u5f0f\u7ebf\u7a0b\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002"),(0,n.kt)("p",null,"The kernel supports a virtually unlimited number of thread priority levels. The configuration options\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kconfig.html#CONFIG_NUM_COOP_PRIORITIES%20%22CONFIG_NUM_COOP_PRIORITIES%22"},"CONFIG_NUM_COOP_PRIORITIES"),"\xa0and\xa0",(0,n.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kconfig.html#CONFIG_NUM_PREEMPT_PRIORITIES%20%22CONFIG_NUM_PREEMPT_PRIORITIES%22"},"CONFIG_NUM_PREEMPT_PRIORITIES"),"\xa0specify the number of priority levels for each class of thread, resulting in the following usable priority ranges:"),(0,n.kt)("p",null,"Zephyr\u5185\u6838\u53ef\u4ee5\u652f\u6301\u65e0\u4e0a\u9650\u7684\u4f18\u5148\u7ea7\u6570\u3002\u53ef\u4ee5\u901a\u8fc7",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIG_NUM_COOP_PRIORITIES")," \u548c",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIG_NUM_PREEMPT_PRIORITIES")," \u8fdb\u884c\u914d\u7f6e\u3002\u4ea7\u751f\u4ee5\u4e0b\u53ef\u7528\u7684\u4f18\u5148\u7ea7\u8303\u56f4:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"\u534f\u4f5c\u5f0f\u7ebf\u7a0b: (",(0,n.kt)("inlineCode",{parentName:"li"},"-CONFIG_NUM_COOP_PRIORITIES")," to -1"),(0,n.kt)("li",{parentName:"ul"},"\u62a2\u5360\u5f0f\u7ebf\u7a0b: 0 to (",(0,n.kt)("inlineCode",{parentName:"li"},"CONFIG_NUM_PREEMPT_PRIORITIES")," - 1)")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://docs.zephyrproject.org/latest/_images/priorities.svg",alt:"Thread Priorities"})),(0,n.kt)("p",null,"For example, configuring 5 cooperative priorities and 10 preemptive priorities results in the ranges -5 to -1 and 0 to 9, respectively."),(0,n.kt)("p",null,"\u4f8b\u5982\u914d\u7f6e5\u4e2a\u534f\u4f5c\u4f18\u5148\u7ea7\u548c10\u4e2a\u62a2\u5360\u4f18\u5148\u7ea7\uff0c\u5176\u53d6\u503c\u8303\u56f4\u5206\u522b\u4e3a-5 ~ -1\u548c0 ~ 9\u3002"),(0,n.kt)("h2",{id:"\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e-thread-custom-data"},"\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e Thread Custom Data"),(0,n.kt)("p",null,"Every thread has a 32-bit custom data area, accessible only by the thread itself, and may be used by the application for any purpose it chooses. The default custom data value for a thread is zero."),(0,n.kt)("p",null,"\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u4e00\u4e2a32\u4f4d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u533a\uff0c\u53ea\u6709\u7ebf\u7a0b\u81ea\u5df1\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u7528\u4e8e\u4efb\u4f55\u76ee\u7684\u3002\u7ebf\u7a0b\u7684\u9ed8\u8ba4\u81ea\u5b9a\u4e49\u6570\u636e\u503c\u4e3a\u96f6\u3002"),(0,n.kt)("p",null,"NOTE\uff1aCustom data support is not available to ISRs because they operate within a single shared kernel interrupt handling context."),(0,n.kt)("p",null,"\u6ce8\u610f\uff1aISRs\u4e0d\u652f\u6301\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u4e00\u4e2a\u5171\u4eab\u5185\u6838\u4e2d\u65ad\u5904\u7406\u4e0a\u4e0b\u6587\u4e2d\u64cd\u4f5c\u3002"),(0,n.kt)("p",null,"By default, thread custom data support is disabled. The configuration option CONFIG_THREAD_CUSTOM_DATA can be used to enable support."),(0,n.kt)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e\u652f\u6301\u662f\u7981\u7528\u7684\u3002\u53ef\u4ee5\u4f7f\u7528\u914d\u7f6e\u9009\u9879",(0,n.kt)("inlineCode",{parentName:"p"},"CONFIG_THREAD_CUSTOM_DATA"),"\u6765\u542f\u7528\u652f\u6301\u3002"),(0,n.kt)("p",null,"The k_thread_custom_data_set() and k_thread_custom_data_get() functions are used to write and read a thread\u2019s custom data, respectively. A thread can only access its own custom data, and not that of another thread."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_custom_data_set()"),"\u548c",(0,n.kt)("inlineCode",{parentName:"p"},"k_thread_custom_data_get()"),"\u51fd\u6570\u5206\u522b\u7528\u4e8e\u5199\u5165\u548c\u8bfb\u53d6\u7ebf\u7a0b\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u3002\u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u8bbf\u95ee\u5b83\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u800c\u4e0d\u80fd\u8bbf\u95ee\u5176\u4ed6\u7ebf\u7a0b\u7684\u6570\u636e\u3002"),(0,n.kt)("p",null,"The following code uses the custom data feature to record the number of times each thread calls a specific routine."),(0,n.kt)("p",null,"\u4e0b\u9762\u7684\u4ee3\u7801\u4f7f\u7528\u81ea\u5b9a\u4e49\u6570\u636e\u7279\u6027\u6765\u8bb0\u5f55\u6bcf\u4e2a\u7ebf\u7a0b\u8c03\u7528\u7279\u5b9a\u4f8b\u7a0b\u7684\u6b21\u6570\u3002"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-c"},"int call_tracking_routine(void)\n{\n    uint32_t call_count;\n\n    if (k_is_in_isr()) {\n        /* ignore any call made by an ISR */\n    } else {\n        call_count = (uint32_t)k_thread_custom_data_get();\n        call_count++;\n        k_thread_custom_data_set((void *)call_count);\n    }\n\n    /* do rest of routine's processing */\n    ...\n}\n")),(0,n.kt)("p",null,"Use thread custom data to allow a routine to access thread-specific information, by using the custom data as a pointer to a data structure owned by the thread."),(0,n.kt)("p",null,"\u4f7f\u7528\u7ebf\u7a0b\u81ea\u5b9a\u4e49\u6570\u636e\uff0c\u5141\u8bb8\u5728\u7ebf\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u8bbf\u95ee\u7ebf\u7a0b\u7279\u5b9a\u7684\u4fe1\u606f\uff0c\u65b9\u6cd5\u662f\u5c06\u81ea\u5b9a\u4e49\u6570\u636e\u4f5c\u4e3a\u6307\u9488\u4f20\u9012\u7ed9\u7ebf\u7a0b\u3002"))}h.isMDXComponent=!0}}]);