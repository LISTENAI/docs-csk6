"use strict";(self.webpackChunkls_docs_web=self.webpackChunkls_docs_web||[]).push([[4096],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9341:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={},o="\u4e2d\u65ad",s={unversionedId:"chips/600X/kernel/interrupts",id:"chips/600X/kernel/interrupts",isDocsHomePage:!1,title:"\u4e2d\u65ad",description:"\u6982\u8ff0",source:"@site/docs/chips/600X/kernel/interrupts.md",sourceDirName:"chips/600X/kernel",slug:"/chips/600X/kernel/interrupts",permalink:"/docs-csk6/chips/600X/kernel/interrupts",version:"current",frontMatter:{},sidebar:"docs/chips/600X",previous:{title:"\u5de5\u4f5c\u961f\u5217\u7ebf\u7a0b",permalink:"/docs-csk6/chips/600X/kernel/workqueue"},next:{title:"\u6982\u8ff0",permalink:"/docs-csk6/chips/600X/service/index"}},l=[{value:"\u6982\u8ff0",id:"\u6982\u8ff0",children:[]},{value:"\u4e2d\u65ad\u5c4f\u853d Preventing Interruptions",id:"\u4e2d\u65ad\u5c4f\u853d-preventing-interruptions",children:[{value:"\u96f6\u5ef6\u8fdf\u4e2d\u65ad Zero Latency Interrupts",id:"\u96f6\u5ef6\u8fdf\u4e2d\u65ad-zero-latency-interrupts",children:[]}]},{value:"Offloading ISR Work \u4e2d\u65ad\u5de5\u4f5c\u8f6c\u79fb",id:"offloading-isr-work-\u4e2d\u65ad\u5de5\u4f5c\u8f6c\u79fb",children:[]}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4e2d\u65ad"},"\u4e2d\u65ad"),(0,a.kt)("h2",{id:"\u6982\u8ff0"},"\u6982\u8ff0"),(0,a.kt)("p",null,"An ISR has the following key properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An\xa0",(0,a.kt)("strong",{parentName:"li"},"interrupt request (IRQ) signal"),"\xa0that triggers the ISR."),(0,a.kt)("li",{parentName:"ul"},"A\xa0",(0,a.kt)("strong",{parentName:"li"},"priority level"),"\xa0associated with the IRQ."),(0,a.kt)("li",{parentName:"ul"},"An\xa0",(0,a.kt)("strong",{parentName:"li"},"interrupt handler function"),"\xa0that is invoked to handle the interrupt."),(0,a.kt)("li",{parentName:"ul"},"An\xa0",(0,a.kt)("strong",{parentName:"li"},"argument value"),"\xa0that is passed to that function.")),(0,a.kt)("p",null,"\u4e2d\u65ad\u6709\u4e0b\u9762\u5173\u952e\u5c5e\u6027\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u89e6\u53d1\u4e2d\u65ad\u7684\u8bf7\u6c42\u4fe1\u53f7\uff08ISR\uff09"),(0,a.kt)("li",{parentName:"ul"},"\u4e2d\u65ad\u4f18\u5148\u7ea7"),(0,a.kt)("li",{parentName:"ul"},"\u4e2d\u65ad\u670d\u52a1\u51fd\u6570"),(0,a.kt)("li",{parentName:"ul"},"\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u7684\u53c2\u6570")),(0,a.kt)("p",null,"An\xa0IDT\xa0or a vector table is used to associate a given interrupt source with a given ISR. Only a single ISR can be associated with a specific IRQ at any given time."),(0,a.kt)("p",null,"\u4e2d\u65ad\u5411\u91cf\u8868(vector table)\u7528\u6765\u5173\u8054\u4e2d\u65ad\u8bf7\u6c42\u548c\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u3002\u5728\u4efb\u4f55\u65f6\u523b\uff0c\u4e00\u4e2a\u4e2d\u65ad\u8bf7\u6c42\u53ea\u5bf9\u5e94\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u3002"),(0,a.kt)("p",null,"Multiple ISRs can utilize the same function to process interrupts, allowing a single function to service a device that generates multiple types of interrupts or to service multiple devices (usually of the same type). The argument value passed to an ISR\u2019s function allows the function to determine which interrupt has been signaled."),(0,a.kt)("p",null,"\u53ef\u4ee5\u7528\u540c\u4e00\u4e2a\u51fd\u6570\uff0c\u6765\u5904\u7406\u591a\u4e2a\u4e2d\u65ad\u8bf7\u6c42\u3002\u8fd9\u4e9b\u4e2d\u65ad\u8bf7\u6c42\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u5916\u8bbe\u4e0d\u540c\u7c7b\u578b\u7684\u4e2d\u65ad\uff0c \u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u5916\u8bbe\u7684\u4e2d\u65ad\u3002\u4e2d\u65ad\u51fd\u6570\u901a\u8fc7\u53c2\u6570\u503c\u6765\u786e\u5b9a\u662f\u54ea\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u89e6\u53d1\u7684\u3002"),(0,a.kt)("p",null,"The kernel provides a default ISR for all unused IDT entries. This ISR generates a fatal system error if an unexpected interrupt is signaled."),(0,a.kt)("p",null,"\u5185\u6838\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u7684\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5bf9\u672a\u7528\u5230\u7684\u4e2d\u65ad\u3002\u5982\u679c\u6709\u975e\u6cd5\u4e2d\u65ad\u89e6\u53d1\uff0c\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4ea7\u751f\u4e00\u4e2a\u7cfb\u7edf\u81f4\u547d\u9519\u8bef\u3002"),(0,a.kt)("p",null,"The kernel supports\xa0",(0,a.kt)("strong",{parentName:"p"},"interrupt nesting"),". This allows an ISR to be preempted in mid-execution if a higher priority interrupt is signaled. The lower priority ISR resumes execution once the higher priority ISR has completed its processing."),(0,a.kt)("p",null,"\u5185\u6838\u652f\u6301\u4e2d\u65ad\u5d4c\u5957(interrupt nesting)\u3002\u9ad8\u4f18\u5148\u7ea7\u7684\u4e2d\u65ad\u53ef\u4ee5\u62a2\u5360\u6b63\u5728\u6267\u884c\u7684\u4f4e\u4f18\u5148\u7ea7\u4e2d\u65ad\uff0c\u9ad8\u4f18\u5148\u7ea7\u6267\u884c\u5b8c\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u540e\uff0c\u4f1a\u7ee7\u7eed\u6267\u884c\u4f4e\u4f18\u5148\u7ea7\u4e2d\u65ad\u3002"),(0,a.kt)("p",null,"An ISR\u2019s interrupt handler function executes in the kernel\u2019s\xa0",(0,a.kt)("strong",{parentName:"p"},"interrupt context"),". This context has its own dedicated stack area (or, on some architectures, stack areas). The size of the interrupt context stack must be capable of handling the execution of multiple concurrent ISRs if interrupt nesting support is enabled."),(0,a.kt)("p",null,"\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5728\u5185\u6838\u7684\u4e2d\u65ad\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u3002\u5185\u6838\u4e2d\u65ad\u4e0a\u4e0b\u6587\u5177\u6709\u81ea\u5df1\u7684\u4e13\u7528\u5806\u6808\u3002\u5982\u679c\u4f7f\u80fd\u4e86",(0,a.kt)("em",{parentName:"p"},"\u4e2d\u65ad\u5d4c\u5957"),"\uff0c\u4e2d\u65ad\u4e0a\u4e0b\u6587\u5806\u6808\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u80fd\u591f\u6ee1\u8db3\u591a\u4e2a\u5e76\u53d1 ISR \u7684\u4e2d\u65ad\u5904\u7406\u3002"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Many kernel APIs can be used only by threads, and not by ISRs. In cases where a routine may be invoked by both threads and ISRs the kernel provides the\xa0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"[k_is_in_isr()](https://docs.zephyrproject.org/latest/kernel/services/interrupts.html#c.k_is_in_isr)")),"API to allow the routine to alter its behavior depending on whether it is executing as part of a thread or as part of an ISR."))),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\u5f88\u591a\u5185\u6838\u63a5\u53e3\u53ea\u80fd\u5728\u7ebf\u7a0b\u4e2d\u4f7f\u7528\uff0c\u800c\u4e0d\u80fd\u5728\u4e2d\u65ad\u4e2d\u4f7f\u7528\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u5141\u8bb8\u88ab\u7ebf\u7a0b\u548c\u4e2d\u65ad\u8c03\u7528\uff0c\u53ef\u4ee5\u7528 ",(0,a.kt)("inlineCode",{parentName:"p"},"k_is_in_isr()")," \u6765\u5224\u65ad\u4e0a\u4e0b\u6587\u662f\u5426\u5728\u4e2d\u65ad\u4e2d\uff0c\u4ece\u800c\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406"))),(0,a.kt)("h2",{id:"\u4e2d\u65ad\u5c4f\u853d-preventing-interruptions"},"\u4e2d\u65ad\u5c4f\u853d Preventing Interruptions"),(0,a.kt)("p",null,"In certain situations it may be necessary for the current thread to prevent ISRs from executing while it is performing time-sensitive or critical section operations."),(0,a.kt)("p",null,"\u5f53\u5728\u7ebf\u7a0b\u4e2d\u6267\u884c\u65f6\u95f4\u654f\u611f\u6216\u5173\u952e\u64cd\u4f5c\u65f6\uff0c\u9700\u8981\u963b\u6b62\u4e2d\u65ad\u5904\u7406\uff0c\u8fd9\u79cd\u64cd\u4f5c\u79f0\u4e4b\u4e3a ",(0,a.kt)("strong",{parentName:"p"},"\u5c4f\u853d\u4e2d\u65ad"),"\u3002"),(0,a.kt)("p",null,"A thread may temporarily prevent all IRQ handling in the system using an\xa0",(0,a.kt)("strong",{parentName:"p"},"IRQ lock"),". This lock can be applied even when it is already in effect, so routines can use it without having to know if it is already in effect. The thread must unlock its IRQ lock the same number of times it was locked before interrupts can be once again processed by the kernel while the thread is running."),(0,a.kt)("p",null,"\u5728\u7ebf\u7a0b\u4e2d\u53ef\u4ee5\u4f7f\u7528\u4e2d\u65ad\u9501(IRQ lock)\u6682\u65f6\u5c4f\u853d\u4e2d\u65ad\u8bf7\u6c42\u5904\u7406\u3002\u5373\u4f7f\u4e2d\u65ad\u9501\u5df2\u7ecf\u751f\u6548\uff0c\u4f46\u4ecd\u53ef\u4ee5\u518d\u6b21\u8c03\u7528\uff0c\u6240\u4ee5\u8c03\u7528\u8005\u4e0d\u9700\u8981\u77e5\u9053\u662f\u5426\u5df2\u7ecf\u751f\u6548\u3002\u7ebf\u7a0b\u91ca\u653e\u9501\u7684\u6b21\u6570\uff0c\u5fc5\u987b\u4e0e\u8c03\u7528\u9501\u7684\u6b21\u6570\u76f8\u540c\uff0c\u624d\u80fd\u771f\u6b63\u7684\u6062\u590d\u8be5\u7ebf\u7a0b\u8fd0\u884c\u65f6\u7684\u4e2d\u65ad\u54cd\u5e94\u3002"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The IRQ lock is thread-specific. If thread A locks out interrupts then performs an operation that puts itself to sleep (e.g. sleeping for N milliseconds), the thread\u2019s IRQ lock no longer applies once thread A is swapped out and the next ready thread B starts to run."),(0,a.kt)("p",{parentName:"div"},"This means that interrupts can be processed while thread B is running unless thread B has also locked out interrupts using its own IRQ lock. (Whether interrupts can be processed while the kernel is switching between two threads that are using the IRQ lock is architecture-specific.)"),(0,a.kt)("p",{parentName:"div"},"When thread A eventually becomes the current thread once again, the kernel re-establishes thread A\u2019s IRQ lock. This ensures thread A won\u2019t be interrupted until it has explicitly unlocked its IRQ lock."),(0,a.kt)("p",{parentName:"div"},"If thread A does not sleep but does make a higher-priority thread B ready, the IRQ lock will inhibit any preemption that would otherwise occur. Thread B will not run until the next\xa0",(0,a.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/scheduling/index.html#scheduling-v2"},"reschedule point"),"\xa0reached after releasing the IRQ lock."))),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\u4e2d\u65ad\u9501\u662f\u7ebf\u7a0b\u7279\u6709\u7684\u3002\u5982\u679c\u7ebf\u7a0bA\u8fdb\u884c\u4e86\u9501\u4e2d\u65ad\u7684\u64cd\u4f5c\u540e\u518d\u7761\u7720\uff08\u7761\u7720\u82e5\u5e72\u6beb\u79d2\uff09\uff0c\u7ebf\u7a0bA\u88ab\u6302\u8d77\uff0c\u51c6\u5907\u6267\u884cB\u7ebf\u7a0b\uff0c\u90a3\u4e48\u7ebf\u7a0bA\u4e2d\u7684\u4e2d\u65ad\u9501\u5c31\u4e0d\u518d\u751f\u6548\u3002"),(0,a.kt)("p",{parentName:"div"},"\u8fd9\u610f\u5473\u7740\u5728\u6267\u884c\u7ebf\u7a0bB\u65f6\uff0c\u4e2d\u65ad\u4ecd\u7136\u53ef\u4ee5\u88ab\u89e6\u53d1\uff0c\u9664\u975e\u5728\u7ebf\u7a0bB\u4e2d\u8c03\u7528\u4e2d\u65ad\u9501\u3002"),(0,a.kt)("p",{parentName:"div"},"\u5f53\u518d\u6b21\u6267\u884c\u7ebf\u7a0bA\uff0c\u5185\u6838\u5c06\u91cd\u65b0\u4f7f\u80fd\u4e2d\u65ad\u9501\uff0c\u786e\u4fdd\u7ebf\u7a0bA\u4e0d\u4f1a\u88ab\u4e2d\u65ad\u76f4\u5230\u7ebf\u7a0bA\u91ca\u653e\u4e2d\u65ad\u9501\u3002"),(0,a.kt)("p",{parentName:"div"},"\u5982\u679c\u7ebf\u7a0bA\u6ca1\u6709\u7761\u7720\uff0c\u4f46\u6b64\u65f6\u4e00\u4e2a\u9ad8\u4f18\u5148\u7ea7\u7ebf\u7a0bB\u5c31\u7eea\uff0c\u4e2d\u65ad\u9501\u5c06\u7981\u6b62\u4efb\u4f55\u53ef\u80fd\u7684\u62a2\u5360\u3002\u53ea\u6709\u7ebf\u7a0bA\u91ca\u653e\u4e86\u4e2d\u65ad\u9501\uff0c\u7ebf\u7a0bB\u624d\u6709\u53ef\u80fd\u88ab\u8c03\u5ea6\u8fd0\u884c\u3002"))),(0,a.kt)("p",null,"Alternatively, a thread may temporarily\xa0",(0,a.kt)("strong",{parentName:"p"},"disable")," a specified IRQ so its associated ISR does not execute when the IRQ is signaled. The IRQ must be subsequently\xa0",(0,a.kt)("strong",{parentName:"p"},"enabled")," to permit the ISR to execute."),(0,a.kt)("p",null,"\u8fd8\u6709\u53e6\u4e00\u79cd\u505a\u6cd5\uff0c\u5728\u7ebf\u7a0b\u4e2d\u4e34\u65f6",(0,a.kt)("strong",{parentName:"p"},"\u7981\u7528"),"\u67d0\u4e2a\u4e2d\u65ad\u8bf7\u6c42\uff0c\u8fd9\u6837\u5f53\u5bf9\u5e94\u4e2d\u65ad\u4fe1\u53f7\u4ea7\u751f\u65f6\uff0c\u4e0d\u4f1a\u6267\u884c\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u3002\u4f46\u5728\u7ebf\u7a0b\u5904\u7406\u540e\uff0c\u5c3d\u5feb\u91cd\u65b0",(0,a.kt)("strong",{parentName:"p"},"\u4f7f\u80fd"),"\u8be5\u4e2d\u65ad\u8bf7\u6c42\uff0c\u8fd9\u6837\u624d\u80fd\u6062\u590d\u5176\u4e2d\u65ad\u5904\u7406\u7684\u54cd\u5e94\u3002"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Disabling an IRQ prevents\xa0",(0,a.kt)("em",{parentName:"p"},"all")," threads in the system from being preempted by the associated ISR, not just the thread that disabled the IRQ."))),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\u7981\u7528\u4e2d\u65ad\u8bf7\u6c42\u53ef\u4ee5\u9632\u6b62\u6240\u6709\u7ebf\u7a0b\u88ab\u4e2d\u65ad\u62a2\u5360\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7981\u7528IRQ\u7684\u7ebf\u7a0b\u3002"))),(0,a.kt)("h3",{id:"\u96f6\u5ef6\u8fdf\u4e2d\u65ad-zero-latency-interrupts"},"\u96f6\u5ef6\u8fdf\u4e2d\u65ad Zero Latency Interrupts"),(0,a.kt)("p",null,"Preventing interruptions by applying an IRQ lock may increase the observed interrupt latency. A high interrupt latency, however, may not be acceptable for certain low-latency use-cases."),(0,a.kt)("p",null,"\u901a\u8fc7\u4e2d\u65ad\u9501\u6765\u5c4f\u853d\u4e2d\u65ad\u53ef\u80fd\u4f1a\u589e\u52a0\u4e2d\u65ad\u5ef6\u8fdf\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u9700\u8981\u4f4e\u5ef6\u8fdf\u7684\u573a\u666f\uff0c\u9ad8\u4e2d\u65ad\u5ef6\u8fdf\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002"),(0,a.kt)("p",null,"The kernel addresses such use-cases by allowing interrupts with critical latency constraints to execute at a priority level that cannot be blocked by interrupt locking. These interrupts are defined as\xa0",(0,a.kt)("em",{parentName:"p"},"zero-latency interrupts"),"."),(0,a.kt)("p",null,"\u5185\u6838\u5141\u8bb8\u5bf9\u5ef6\u8fdf\u6709\u8981\u6c42\u7684\u4e2d\u65ad\u5728\u4f7f\u7528\u4e2d\u65ad\u9501\u540e\u4ecd\u80fd\u89e6\u53d1\u3002\u8fd9\u4e9b\u4e2d\u65ad\u88ab\u5b9a\u4e49\u4e3a\u96f6\u5ef6\u8fdf\u4e2d\u65ad(Zero Latency Interrupts)\u3002"),(0,a.kt)("p",null," The support for zero-latency interrupts equires\xa0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"[CONFIG_ZERO_LATENCY_IRQS](https://docs.zephyrproject.org/latest/kconfig.html#CONFIG_ZERO_LATENCY_IRQS)")),"\xa0to be enabled. In addition to that, the flag\xa0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"IRQ_ZERO_LATENCY")),"\xa0must be passed to\xa0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"[IRQ_CONNECT](https://docs.zephyrproject.org/latest/kernel/services/interrupts.html#c.IRQ_CONNECT)")),"\xa0or\xa0",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"[IRQ_DIRECT_CONNECT](https://docs.zephyrproject.org/latest/kernel/services/interrupts.html#c.IRQ_DIRECT_CONNECT)")),"\xa0macros to configure the particular interrupt with zero latency."),(0,a.kt)("p",null,"\u96f6\u5ef6\u8fdf\u4e2d\u65ad\u9700\u8981\u4f7f\u80fd",(0,a.kt)("inlineCode",{parentName:"p"},"CONFIG_ZERO_LATENCY_IRQS")," \u3002\u53e6\u5916\uff0c\u9700\u8981\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"IRQ_CONNECT")," \u6216 ",(0,a.kt)("inlineCode",{parentName:"p"},"IRQ_DIRECT_CONNECT")," \u4e2d\u914d\u7f6e\u4e3a",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"IRQ_ZERO_LATENCY")),"\xa0\u3002"),(0,a.kt)("p",null,"Zero-latency interrupts are expected to be used to manage hardware events directly, and not to interoperate with the kernel code at all. They should treat all kernel APIs as undefined behavior (i.e. an application that uses the APIs inside a zero-latency interrupt context is responsible for directly verifying correct behavior). Zero-latency interrupts may not modify any data inspected by kernel APIs invoked from normal Zephyr contexts and shall not generate exceptions that need to be handled synchronously (e.g. kernel panic)."),(0,a.kt)("p",null,"\u96f6\u5ef6\u8fdf\u4e2d\u65ad\u7528\u4e8e\u76f4\u63a5\u7ba1\u7406\u786c\u4ef6\u4e2d\u65ad\uff0c\u4e0d\u4f1a\u7ecf\u8fc7Zephyr\u5185\u6838\u3002\u5728\u96f6\u5ef6\u8fdf\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4e2d\u4f7f\u7528\u5185\u6838API\uff0c\u9700\u8981\u7528\u6237\u53bb\u4fdd\u8bc1API\u4f7f\u7528\u7684\u6b63\u786e\u6027\u3002\u96f6\u5ef6\u8fdf\u4e2d\u65ad\u4e0d\u5f97\u4fee\u6539\u4ece\u6b63\u5e38Zephyr\u4e0a\u4e0b\u6587\u8c03\u7528\u7684\u5185\u6838API\u6240\u68c0\u67e5\u7684\u4efb\u4f55\u6570\u636e\uff0c\u4e5f\u4e0d\u5f97\u4ea7\u751f\u9700\u8981\u540c\u6b65\u5904\u7406\u7684\u5f02\u5e38(\u4f8b\u5982\u5185\u6838panic)\u3002"),(0,a.kt)("h2",{id:"offloading-isr-work-\u4e2d\u65ad\u5de5\u4f5c\u8f6c\u79fb"},"Offloading ISR Work \u4e2d\u65ad\u5de5\u4f5c\u8f6c\u79fb"),(0,a.kt)("p",null,"An ISR should execute quickly to ensure predictable system operation. If time consuming processing is required the ISR should offload some or all processing to a thread, thereby restoring the kernel\u2019s ability to respond to other interrupts."),(0,a.kt)("p",null,"\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u5e94\u8be5\u5feb\u901f\u6267\u884c\uff0c\u4ee5\u786e\u4fdd\u7cfb\u7edf\u6b63\u5e38\u8fd0\u884c\u3002\u5982\u679c\u9700\u8981\u6267\u884c\u8017\u65f6\u7684\u5904\u7406\uff0c\u4e2d\u65ad\u5904\u7406\u51fd\u6570\u5e94\u8be5\u5c06\u4e00\u4e9b\u6216\u6240\u6709\u7684\u5904\u7406\u90fd\u5206\u62c5\u7ed9\u4e00\u4e2a\u8f85\u52a9\u7ebf\u7a0b(helper thread)\uff0c\u4ece\u800c\u6062\u590d\u5185\u6838\u5bf9\u5176\u4ed6\u4e2d\u65ad\u7684\u54cd\u5e94\u80fd\u529b\u3002"),(0,a.kt)("p",null,"The kernel supports several mechanisms for offloading interrupt-related processing to a thread."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An ISR can signal a helper thread to do interrupt-related processing using a kernel object, such as a FIFO, LIFO, or semaphore."),(0,a.kt)("li",{parentName:"ul"},"An ISR can instruct the system workqueue thread to execute a work item. (See\xa0",(0,a.kt)("a",{parentName:"li",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/workqueue.html#workqueues-v2"},"Workqueue Threads"),".)")),(0,a.kt)("p",null,"\u5185\u6838\u652f\u6301\u591a\u79cd\u65b9\u6cd5\u53bb\u5206\u62c5\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u7684\u5904\u7406\u7ed9\u7ebf\u7a0b\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4e2d\u4f7f\u7528\u5185\u6838\u5bf9\u8c61(\u5982FIFO\u3001LIFO\u6216\u4fe1\u53f7\u91cf)\u901a\u77e5\u8f85\u52a9\u7ebf\u7a0b\u6267\u884c\u4e0e\u4e2d\u65ad\u76f8\u5173\u7684\u5904\u7406\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u5728\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u4e2d\u6307\u793a\u7cfb\u7edf\u5de5\u4f5c\u961f\u5217\u7ebf\u7a0b\u6267\u884c\u5de5\u4f5c\u9879\u3002")),(0,a.kt)("p",null,"When an ISR offloads work to a thread, there is typically a single context switch to that thread when the ISR completes, allowing interrupt-related processing to continue almost immediately. However, depending on the priority of the thread handling the offload, it is possible that the currently executing cooperative thread or other higher-priority threads may execute before the thread handling the offload is scheduled."),(0,a.kt)("p",null,"\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5185\u6838\u4f1a\u6267\u884c\u4e00\u6b21 ",(0,a.kt)("em",{parentName:"p"},"\u4e0a\u4e0b\u6587\u5207\u6362"),"\uff0c\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u7acb\u5373\u6267\u884c\u8f85\u52a9\u7ebf\u7a0b\u3002\u4f46\u7531\u4e8e\u7ebf\u7a0b\u4f18\u5148\u7ea7\u7684\u5173\u7cfb\uff0c\u4e5f\u53ef\u80fd\u8c03\u5ea6\u5230\u5176\u4ed6\u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\u7684\u7ebf\u7a0b\u6216\u534f\u7a0b\u3002"))}c.isMDXComponent=!0}}]);